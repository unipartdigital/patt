scope: batman
#namespace: /service/
name: postgresql0

log:
  level: WARNING #NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL
#  loggers: This section allows redefining logging level per python module
#    patroni.postmaster: WARNING
#    urllib3: DEBUG


restapi:
  listen: "::1:8008"
  connect_address: "[::1]:8008"
#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key
#  authentication:
#    username: username
#    password: password

# ctl:
#   insecure: false # Allow connections to SSL sites without certs
#   certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#   cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem

# etcd:
#   host: "::1:2379"

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 240
    maximum_lag_on_failover: 1048576
#    master_start_timeout: 300
    synchronous_mode: true
    #standby_cluster:
      #host: 127.0.0.1
      #port: 1111
      #primary_slot_name: patroni
    postgresql:
      use_pg_rewind: true
      remove_data_directory_on_rewind_failure: true
#      use_slots: true
      parameters:
#        wal_level: hot_standby
#        hot_standby: "on"
#        wal_keep_segments: 8
#        max_wal_senders: 10
#        max_replication_slots: 10
#        wal_log_hints: "on"
#        archive_mode: "on"
#        archive_timeout: 1800s
#        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f
#      recovery_conf:
#        restore_command: cp ../wal_archive/%f %p

  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - local: en_GB.UTF-8
  - data-checksums
#  - auth-local: ident
#  - auth-host: scram-sha-256

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  # For kerberos gss based connectivity (discard @.*$)
  #- host replication replicator 127.0.0.1/32 gss include_realm=0
  #- host all all 0.0.0.0/0 gss include_realm=0
  - local all all     ident
  - host all all ::/0 scram-sha-256
  - host all all 0.0.0.0/0 scram-sha-256
  - host replication replication ::/0 scram-sha-256
  - host replication replication 0.0.0.0/0 scram-sha-256

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

  # # Some additional users users which needs to be created after initializing new cluster
  # users:
  #   admin:
  #     password: admin
  #     options:
  #       - createrole
  #       - createdb

postgresql:
  listen: ":::5432"
  connect_address: "[::1]"
  data_dir: /var/lib/pgsql/11/data
  bin_dir: /usr/pgsql-11/bin
#  config_dir:
  pgpass: /var/lib/pgsql/pgpass
  authentication:
    replication:
      username: replication
      password:
    superuser:
      username: postgres
      password:
    rewind:  # Has no effect on postgres 10 and lower
      username: rewind_user
      password:
  # Server side kerberos spn
#  krbsrvname: postgres
  parameters:
    archive_mode: on
    archive_command: /bin/true
    # archive on require a restart,
    # but archive_command: /bin/true make it a no operation and
    # may be overwrite later with the real command
    stats_temp_directory: /var/cache/pg_stats_temp
    # use systemd TemporaryFileSystem (tmpfs) for stats_temp
    # Fully qualified kerberos ticket file for the running user
    # same as KRB5CCNAME used by the GSS
#   krb_server_keyfile: /var/spool/keytabs/postgres
    unix_socket_directories: '/var/run/postgresql'
    password_encryption: 'scram-sha-256'
    # if it's not a new deployment, make all users set new passwords
    # misc/patroni_passwd.py (to update patroni passwords)
  callbacks:
# run this script when configuration reload is triggered.
    on_reload:
      /usr/local/sbin/ip_takeover
# run this script when the postgres restarts (without changing role).
    on_restart:
      /usr/local/sbin/ip_takeover
# run this script when the postgres is being promoted or demoted.
    on_role_change:
      /usr/local/sbin/ip_takeover
# run this script when the postgres starts.
    on_start:
      /usr/local/sbin/ip_takeover
# run this script when the postgres stops.
    on_stop:
      /usr/local/sbin/ip_takeover

watchdog:
  mode: automatic # Allowed values: off, automatic, required
  device: /dev/watchdog
  safety_margin: 5

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
