#! /usr/sbin/nft -f

# drop any existing nftables ruleset
flush ruleset

table ip postgres_patroni {
        chain incoming {
                type filter hook input priority 0; policy drop;
                ct state established,related accept
                iifname "lo" accept
                icmp type echo-request accept
                tcp dport { ssh } accept
        }
}

table ip6 postgres_patroni {
        set etcd_peers {
                type ipv6_addr
                elements = {$etcd_peers}
        }

        set patroni_peers {
                type ipv6_addr
                elements = {$patroni_peers}
        }

        set haproxy_peers {
                type ipv6_addr
                elements = {$haproxy_peers}
        }

        set pg_clients {
                type ipv6_addr
                flags interval
                elements = {$postgres_clients}
        }

        set pg_blackhole {
                type ipv6_addr
        }

        set sftp_archiving_port {
                type inet_service
        }

        set monitoring_clients {
                type ipv6_addr
                flags interval
                elements = {$monitoring_clients}
        }

        chain incoming {
                type filter hook input priority 0; policy drop;

                # postgres floating ips
                # floating ips will be added into pg_blackhole as long as the database is read-only
                # and removed only from master when ready (read-write transaction)
                tcp dport { postgresql } ip6 daddr @pg_blackhole drop

                ct state established,related accept
                ct state invalid drop
                iifname "lo" accept
                icmpv6 type { destination-unreachable, packet-too-big, time-exceeded,
                parameter-problem, echo-request, echo-reply,
                mld-listener-query, mld-listener-report, mld-listener-done,
                nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept
                ip6 saddr fe80::/64 udp dport dhcpv6-client accept
                ip6 saddr fe80::/64 tcp dport dhcpv6-client accept

                tcp dport { ssh } accept

                # postgres
                tcp dport { postgresql } ip6 saddr @patroni_peers accept
                tcp dport { postgresql } ip6 saddr @haproxy_peers accept
                tcp dport { postgresql } ip6 saddr @pg_clients accept
                # etcd
                tcp dport { 2380 } ip6 saddr @etcd_peers accept
                tcp dport { 2379 } ip6 saddr @etcd_peers accept
                tcp dport { 2379 } ip6 saddr @patroni_peers accept
                # patroni
                tcp dport { 8008 } ip6 saddr @patroni_peers accept
                tcp dport { 8008 } ip6 saddr @haproxy_peers accept
                # haproxy
                tcp dport { 15432 } ip6 saddr @pg_clients accept
                # walg sftp archiving
                tcp dport @sftp_archiving_port accept
                # monitoring (cluster health) clients
                tcp dport { 80 } ip6 saddr @monitoring_clients accept

        }
}
